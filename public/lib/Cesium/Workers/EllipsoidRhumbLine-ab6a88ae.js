/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Cartesian3-2da9bb0a","./Cartographic-de64a93a","./Check-d82b20f7","./defaultValue-4607806f","./DeveloperError-46384437","./Rectangle-86ccddaa","./Math-6bc63320"],(function(t,i,e,a,n,s,h,u){"use strict";function o(t,i,e){if(0===t)return i*e;const a=t*t,n=a*a,s=n*a,h=s*a,u=h*a,o=u*a,r=e;return i*((1-a/4-3*n/64-5*s/256-175*h/16384-441*u/65536-4851*o/1048576)*r-(3*a/8+3*n/32+45*s/1024+105*h/4096+2205*u/131072+6237*o/524288)*Math.sin(2*r)+(15*n/256+45*s/1024+525*h/16384+1575*u/65536+155925*o/8388608)*Math.sin(4*r)-(35*s/3072+175*h/12288+3675*u/262144+13475*o/1048576)*Math.sin(6*r)+(315*h/131072+2205*u/524288+43659*o/8388608)*Math.sin(8*r)-(693*u/1310720+6237*o/5242880)*Math.sin(10*r)+1001*o/8388608*Math.sin(12*r))}function r(t,i){if(0===t)return Math.log(Math.tan(.5*(u.CesiumMath.PI_OVER_TWO+i)));const e=t*Math.sin(i);return Math.log(Math.tan(.5*(u.CesiumMath.PI_OVER_TWO+i)))-t/2*Math.log((1+e)/(1-e))}const l=new i.Cartesian3,d=new i.Cartesian3;function c(t,a,n,s){i.Cartesian3.normalize(s.cartographicToCartesian(a,d),l),i.Cartesian3.normalize(s.cartographicToCartesian(n,d),d);const h=s.maximumRadius,c=s.minimumRadius,M=h*h,g=c*c;t._ellipticitySquared=(M-g)/M,t._ellipticity=Math.sqrt(t._ellipticitySquared),t._start=e.Cartographic.clone(a,t._start),t._start.height=0,t._end=e.Cartographic.clone(n,t._end),t._end.height=0,t._heading=function(t,i,e,a,n){const s=r(t._ellipticity,e),h=r(t._ellipticity,n);return Math.atan2(u.CesiumMath.negativePiToPi(a-i),h-s)}(t,a.longitude,a.latitude,n.longitude,n.latitude),t._distance=function(t,i,e,a,n,s,h){const r=t._heading,l=s-a;let d=0;if(u.CesiumMath.equalsEpsilon(Math.abs(r),u.CesiumMath.PI_OVER_TWO,u.CesiumMath.EPSILON8))if(i===e)d=i*Math.cos(n)*u.CesiumMath.negativePiToPi(l);else{const e=Math.sin(n);d=i*Math.cos(n)*u.CesiumMath.negativePiToPi(l)/Math.sqrt(1-t._ellipticitySquared*e*e)}else{const e=o(t._ellipticity,i,n);d=(o(t._ellipticity,i,h)-e)/Math.cos(r)}return Math.abs(d)}(t,s.maximumRadius,s.minimumRadius,a.longitude,a.latitude,n.longitude,n.latitude)}function M(t,i,a,s,h,l){if(0===a)return e.Cartographic.clone(t,l);const d=h*h;let c,M,g;if(Math.abs(u.CesiumMath.PI_OVER_TWO-Math.abs(i))>u.CesiumMath.EPSILON8){M=function(t,i,e){const a=t/e;if(0===i)return a;const n=a*a,s=n*a,h=s*a,u=i*i,o=u*u,r=o*u,l=r*u,d=l*u,c=d*u,M=Math.sin(2*a),g=Math.cos(2*a),m=Math.sin(4*a),_=Math.cos(4*a),p=Math.sin(6*a),C=Math.cos(6*a),f=Math.sin(8*a),P=Math.cos(8*a),O=Math.sin(10*a);return a+a*u/4+7*a*o/64+15*a*r/256+579*a*l/16384+1515*a*d/65536+16837*a*c/1048576+(3*a*o/16+45*a*r/256-a*(32*n-561)*l/4096-a*(232*n-1677)*d/16384+a*(399985-90560*n+512*h)*c/5242880)*g+(21*a*r/256+483*a*l/4096-a*(224*n-1969)*d/16384-a*(33152*n-112599)*c/1048576)*_+(151*a*l/4096+4681*a*d/65536+1479*a*c/16384-453*s*c/32768)*C+(1097*a*d/65536+42783*a*c/1048576)*P+8011*a*c/1048576*Math.cos(10*a)+(3*u/8+3*o/16+213*r/2048-3*n*r/64+255*l/4096-33*n*l/512+20861*d/524288-33*n*d/512+h*d/1024+28273*c/1048576-471*n*c/8192+9*h*c/4096)*M+(21*o/256+21*r/256+533*l/8192-21*n*l/512+197*d/4096-315*n*d/4096+584039*c/16777216-12517*n*c/131072+7*h*c/2048)*m+(151*r/6144+151*l/4096+5019*d/131072-453*n*d/16384+26965*c/786432-8607*n*c/131072)*p+(1097*l/131072+1097*d/65536+225797*c/10485760-1097*n*c/65536)*f+(8011*d/2621440+8011*c/1048576)*O+293393*c/251658240*Math.sin(12*a)}(o(h,s,t.latitude)+a*Math.cos(i),h,s);const e=r(h,t.latitude),n=r(h,M);g=Math.tan(i)*(n-e),c=u.CesiumMath.negativePiToPi(t.longitude+g)}else{let e;if(M=t.latitude,0===h)e=s*Math.cos(t.latitude);else{const i=Math.sin(t.latitude);e=s*Math.cos(t.latitude)/Math.sqrt(1-d*i*i)}g=a/e,c=i>0?u.CesiumMath.negativePiToPi(t.longitude+g):u.CesiumMath.negativePiToPi(t.longitude-g)}return n.defined(l)?(l.longitude=c,l.latitude=M,l.height=0,l):new e.Cartographic(c,M,0)}function g(t,i,a){const s=n.defaultValue(a,h.Ellipsoid.WGS84);this._ellipsoid=s,this._start=new e.Cartographic,this._end=new e.Cartographic,this._heading=void 0,this._distance=void 0,this._ellipticity=void 0,this._ellipticitySquared=void 0,n.defined(t)&&n.defined(i)&&c(this,t,i,s)}Object.defineProperties(g.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},heading:{get:function(){return this._heading}}}),g.fromStartHeadingDistance=function(t,i,e,a,s){const o=n.defaultValue(a,h.Ellipsoid.WGS84),r=o.maximumRadius,l=o.minimumRadius,d=r*r,c=l*l,m=Math.sqrt((d-c)/d),_=M(t,i=u.CesiumMath.negativePiToPi(i),e,o.maximumRadius,m);return!n.defined(s)||n.defined(a)&&!a.equals(s.ellipsoid)?new g(t,_,o):(s.setEndPoints(t,_),s)},g.prototype.setEndPoints=function(t,i){c(this,t,i,this._ellipsoid)},g.prototype.interpolateUsingFraction=function(t,i){return this.interpolateUsingSurfaceDistance(t*this._distance,i)},g.prototype.interpolateUsingSurfaceDistance=function(t,i){return M(this._start,this._heading,t,this._ellipsoid.maximumRadius,this._ellipticity,i)},g.prototype.findIntersectionWithLongitude=function(t,i){const a=this._ellipticity,s=this._heading,h=Math.abs(s),o=this._start;if(t=u.CesiumMath.negativePiToPi(t),u.CesiumMath.equalsEpsilon(Math.abs(t),Math.PI,u.CesiumMath.EPSILON14)&&(t=u.CesiumMath.sign(o.longitude)*Math.PI),n.defined(i)||(i=new e.Cartographic),Math.abs(u.CesiumMath.PI_OVER_TWO-h)<=u.CesiumMath.EPSILON8)return i.longitude=t,i.latitude=o.latitude,i.height=0,i;if(u.CesiumMath.equalsEpsilon(Math.abs(u.CesiumMath.PI_OVER_TWO-h),u.CesiumMath.PI_OVER_TWO,u.CesiumMath.EPSILON8)){if(u.CesiumMath.equalsEpsilon(t,o.longitude,u.CesiumMath.EPSILON12))return;return i.longitude=t,i.latitude=u.CesiumMath.PI_OVER_TWO*u.CesiumMath.sign(u.CesiumMath.PI_OVER_TWO-s),i.height=0,i}const r=o.latitude,l=a*Math.sin(r),d=Math.tan(.5*(u.CesiumMath.PI_OVER_TWO+r))*Math.exp((t-o.longitude)/Math.tan(s)),c=(1+l)/(1-l);let M,g=o.latitude;do{M=g;const t=a*Math.sin(M),i=(1+t)/(1-t);g=2*Math.atan(d*Math.pow(i/c,a/2))-u.CesiumMath.PI_OVER_TWO}while(!u.CesiumMath.equalsEpsilon(g,M,u.CesiumMath.EPSILON12));return i.longitude=t,i.latitude=g,i.height=0,i},g.prototype.findIntersectionWithLatitude=function(t,i){const a=this._ellipticity,s=this._heading,h=this._start;if(u.CesiumMath.equalsEpsilon(Math.abs(s),u.CesiumMath.PI_OVER_TWO,u.CesiumMath.EPSILON8))return;const o=r(a,h.latitude),l=r(a,t),d=Math.tan(s)*(l-o),c=u.CesiumMath.negativePiToPi(h.longitude+d);return n.defined(i)?(i.longitude=c,i.latitude=t,i.height=0,i):new e.Cartographic(c,t,0)},t.EllipsoidRhumbLine=g}));
