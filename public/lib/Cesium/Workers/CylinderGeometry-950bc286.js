/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Transforms-96990627","./Matrix4-097242f7","./Cartesian3-2da9bb0a","./ComponentDatatype-322827fe","./CylinderGeometryLibrary-33035d5b","./defaultValue-4607806f","./DeveloperError-46384437","./GeometryAttribute-7cf0f8d6","./GeometryAttributes-acac33d2","./GeometryOffsetAttribute-3e5f3e97","./IndexDatatype-3ff1faa7","./Math-6bc63320","./VertexFormat-8361ed33"],(function(t,e,n,a,o,r,i,s,u,m,l,c,f,d){"use strict";const p=new n.Cartesian2,y=new a.Cartesian3,b=new a.Cartesian3,A=new a.Cartesian3,x=new a.Cartesian3;function g(t){const e=(t=i.defaultValue(t,i.defaultValue.EMPTY_OBJECT)).length,n=t.topRadius,a=t.bottomRadius,o=i.defaultValue(t.vertexFormat,d.VertexFormat.DEFAULT),r=i.defaultValue(t.slices,128);this._length=e,this._topRadius=n,this._bottomRadius=a,this._vertexFormat=d.VertexFormat.clone(o),this._slices=r,this._offsetAttribute=t.offsetAttribute,this._workerName="createCylinderGeometry"}g.packedLength=d.VertexFormat.packedLength+5,g.pack=function(t,e,n){return n=i.defaultValue(n,0),d.VertexFormat.pack(t._vertexFormat,e,n),n+=d.VertexFormat.packedLength,e[n++]=t._length,e[n++]=t._topRadius,e[n++]=t._bottomRadius,e[n++]=t._slices,e[n]=i.defaultValue(t._offsetAttribute,-1),e};const _=new d.VertexFormat,h={vertexFormat:_,length:void 0,topRadius:void 0,bottomRadius:void 0,slices:void 0,offsetAttribute:void 0};let v;g.unpack=function(t,e,n){e=i.defaultValue(e,0);const a=d.VertexFormat.unpack(t,e,_);e+=d.VertexFormat.packedLength;const o=t[e++],r=t[e++],s=t[e++],u=t[e++],m=t[e];return i.defined(n)?(n._vertexFormat=d.VertexFormat.clone(a,n._vertexFormat),n._length=o,n._topRadius=r,n._bottomRadius=s,n._slices=u,n._offsetAttribute=-1===m?void 0:m,n):(h.length=o,h.topRadius=r,h.bottomRadius=s,h.slices=u,h.offsetAttribute=-1===m?void 0:m,new g(h))},g.createGeometry=function(t){let s=t._length;const d=t._topRadius,g=t._bottomRadius,_=t._vertexFormat,h=t._slices;if(s<=0||d<0||g<0||0===d&&0===g)return;const v=h+h,C=h+v,F=v+v,w=r.CylinderGeometryLibrary.computePositions(s,d,g,h,!0),G=_.st?new Float32Array(2*F):void 0,D=_.normal?new Float32Array(3*F):void 0,V=_.tangent?new Float32Array(3*F):void 0,R=_.bitangent?new Float32Array(3*F):void 0;let T;const O=_.normal||_.tangent||_.bitangent;if(O){const t=_.tangent||_.bitangent;let e=0,n=0,o=0;const r=Math.atan2(g-d,s),i=y;i.z=Math.sin(r);const u=Math.cos(r);let m=A,l=b;for(T=0;T<h;T++){const r=T/h*f.CesiumMath.TWO_PI,s=u*Math.cos(r),c=u*Math.sin(r);O&&(i.x=s,i.y=c,t&&(m=a.Cartesian3.normalize(a.Cartesian3.cross(a.Cartesian3.UNIT_Z,i,m),m)),_.normal&&(D[e++]=i.x,D[e++]=i.y,D[e++]=i.z,D[e++]=i.x,D[e++]=i.y,D[e++]=i.z),_.tangent&&(V[n++]=m.x,V[n++]=m.y,V[n++]=m.z,V[n++]=m.x,V[n++]=m.y,V[n++]=m.z),_.bitangent&&(l=a.Cartesian3.normalize(a.Cartesian3.cross(i,m,l),l),R[o++]=l.x,R[o++]=l.y,R[o++]=l.z,R[o++]=l.x,R[o++]=l.y,R[o++]=l.z))}for(T=0;T<h;T++)_.normal&&(D[e++]=0,D[e++]=0,D[e++]=-1),_.tangent&&(V[n++]=1,V[n++]=0,V[n++]=0),_.bitangent&&(R[o++]=0,R[o++]=-1,R[o++]=0);for(T=0;T<h;T++)_.normal&&(D[e++]=0,D[e++]=0,D[e++]=1),_.tangent&&(V[n++]=1,V[n++]=0,V[n++]=0),_.bitangent&&(R[o++]=0,R[o++]=1,R[o++]=0)}const L=12*h-12,M=c.IndexDatatype.createTypedArray(F,L);let P=0,E=0;for(T=0;T<h-1;T++)M[P++]=E,M[P++]=E+2,M[P++]=E+3,M[P++]=E,M[P++]=E+3,M[P++]=E+1,E+=2;for(M[P++]=v-2,M[P++]=0,M[P++]=1,M[P++]=v-2,M[P++]=1,M[P++]=v-1,T=1;T<h-1;T++)M[P++]=v+T+1,M[P++]=v+T,M[P++]=v;for(T=1;T<h-1;T++)M[P++]=C,M[P++]=C+T,M[P++]=C+T+1;let k=0;if(_.st){const t=Math.max(d,g);for(T=0;T<F;T++){const e=a.Cartesian3.fromArray(w,3*T,x);G[k++]=(e.x+t)/(2*t),G[k++]=(e.y+t)/(2*t)}}const z=new m.GeometryAttributes;_.position&&(z.position=new u.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:w})),_.normal&&(z.normal=new u.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:D})),_.tangent&&(z.tangent=new u.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:V})),_.bitangent&&(z.bitangent=new u.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:R})),_.st&&(z.st=new u.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:G})),p.x=.5*s,p.y=Math.max(g,d);const N=new e.BoundingSphere(a.Cartesian3.ZERO,n.Cartesian2.magnitude(p));if(i.defined(t._offsetAttribute)){s=w.length;const e=t._offsetAttribute===l.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(s/3).fill(e);z.applyOffset=new u.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}return new u.Geometry({attributes:z,indices:M,primitiveType:u.PrimitiveType.TRIANGLES,boundingSphere:N,offsetAttribute:t._offsetAttribute})},g.getUnitCylinder=function(){return i.defined(v)||(v=g.createGeometry(new g({topRadius:1,bottomRadius:1,length:1,vertexFormat:d.VertexFormat.POSITION_ONLY}))),v},t.CylinderGeometry=g}));
