/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Transforms-96990627","./Matrix4-097242f7","./Cartesian3-2da9bb0a","./ComponentDatatype-322827fe","./defaultValue-4607806f","./DeveloperError-46384437","./Rectangle-86ccddaa","./GeometryAttribute-7cf0f8d6","./GeometryAttributes-acac33d2","./GeometryOffsetAttribute-3e5f3e97","./IndexDatatype-3ff1faa7","./Math-6bc63320","./VertexFormat-8361ed33"],(function(t,e,a,n,i,r,o,s,m,u,c,l,f,d){"use strict";const C=new n.Cartesian3,p=new n.Cartesian3,y=new n.Cartesian3,_=new n.Cartesian3,h=new n.Cartesian3,x=new n.Cartesian3(1,1,1),A=Math.cos,b=Math.sin;function k(t){t=r.defaultValue(t,r.defaultValue.EMPTY_OBJECT);const e=r.defaultValue(t.radii,x),a=r.defaultValue(t.innerRadii,e),i=r.defaultValue(t.minimumClock,0),o=r.defaultValue(t.maximumClock,f.CesiumMath.TWO_PI),s=r.defaultValue(t.minimumCone,0),m=r.defaultValue(t.maximumCone,f.CesiumMath.PI),u=Math.round(r.defaultValue(t.stackPartitions,64)),c=Math.round(r.defaultValue(t.slicePartitions,64)),l=r.defaultValue(t.vertexFormat,d.VertexFormat.DEFAULT);this._radii=n.Cartesian3.clone(e),this._innerRadii=n.Cartesian3.clone(a),this._minimumClock=i,this._maximumClock=o,this._minimumCone=s,this._maximumCone=m,this._stackPartitions=u,this._slicePartitions=c,this._vertexFormat=d.VertexFormat.clone(l),this._offsetAttribute=t.offsetAttribute,this._workerName="createEllipsoidGeometry"}k.packedLength=2*n.Cartesian3.packedLength+d.VertexFormat.packedLength+7,k.pack=function(t,e,a){return a=r.defaultValue(a,0),n.Cartesian3.pack(t._radii,e,a),a+=n.Cartesian3.packedLength,n.Cartesian3.pack(t._innerRadii,e,a),a+=n.Cartesian3.packedLength,d.VertexFormat.pack(t._vertexFormat,e,a),a+=d.VertexFormat.packedLength,e[a++]=t._minimumClock,e[a++]=t._maximumClock,e[a++]=t._minimumCone,e[a++]=t._maximumCone,e[a++]=t._stackPartitions,e[a++]=t._slicePartitions,e[a]=r.defaultValue(t._offsetAttribute,-1),e};const w=new n.Cartesian3,g=new n.Cartesian3,P=new d.VertexFormat,v={radii:w,innerRadii:g,vertexFormat:P,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,offsetAttribute:void 0};let F;k.unpack=function(t,e,a){e=r.defaultValue(e,0);const i=n.Cartesian3.unpack(t,e,w);e+=n.Cartesian3.packedLength;const o=n.Cartesian3.unpack(t,e,g);e+=n.Cartesian3.packedLength;const s=d.VertexFormat.unpack(t,e,P);e+=d.VertexFormat.packedLength;const m=t[e++],u=t[e++],c=t[e++],l=t[e++],f=t[e++],C=t[e++],p=t[e];return r.defined(a)?(a._radii=n.Cartesian3.clone(i,a._radii),a._innerRadii=n.Cartesian3.clone(o,a._innerRadii),a._vertexFormat=d.VertexFormat.clone(s,a._vertexFormat),a._minimumClock=m,a._maximumClock=u,a._minimumCone=c,a._maximumCone=l,a._stackPartitions=f,a._slicePartitions=C,a._offsetAttribute=-1===p?void 0:p,a):(v.minimumClock=m,v.maximumClock=u,v.minimumCone=c,v.maximumCone=l,v.stackPartitions=f,v.slicePartitions=C,v.offsetAttribute=-1===p?void 0:p,new k(v))},k.createGeometry=function(t){const o=t._radii;if(o.x<=0||o.y<=0||o.z<=0)return;const d=t._innerRadii;if(d.x<=0||d.y<=0||d.z<=0)return;const x=t._minimumClock,k=t._maximumClock,w=t._minimumCone,g=t._maximumCone,P=t._vertexFormat;let v,F,V=t._slicePartitions+1,M=t._stackPartitions+1;V=Math.round(V*Math.abs(k-x)/f.CesiumMath.TWO_PI),M=Math.round(M*Math.abs(g-w)/f.CesiumMath.PI),V<2&&(V=2),M<2&&(M=2);let T=0;const D=[w],G=[x];for(v=0;v<M;v++)D.push(w+v*(g-w)/(M-1));for(D.push(g),F=0;F<V;F++)G.push(x+F*(k-x)/(V-1));G.push(k);const L=D.length,O=G.length;let I=0,E=1;const z=d.x!==o.x||d.y!==o.y||d.z!==o.z;let N=!1,R=!1,U=!1;z&&(E=2,w>0&&(N=!0,I+=V-1),g<Math.PI&&(R=!0,I+=V-1),(k-x)%f.CesiumMath.TWO_PI?(U=!0,I+=2*(M-1)+1):I+=1);const S=O*L*E,B=new Float64Array(3*S),W=new Array(S).fill(!1),Y=new Array(S).fill(!1),J=V*M*E,X=6*(J+I+1-(V+M)*E),Z=l.IndexDatatype.createTypedArray(J,X),j=P.normal?new Float32Array(3*S):void 0,q=P.tangent?new Float32Array(3*S):void 0,H=P.bitangent?new Float32Array(3*S):void 0,K=P.st?new Float32Array(2*S):void 0,Q=new Array(L),$=new Array(L);for(v=0;v<L;v++)Q[v]=b(D[v]),$[v]=A(D[v]);const tt=new Array(O),et=new Array(O);for(F=0;F<O;F++)et[F]=A(G[F]),tt[F]=b(G[F]);for(v=0;v<L;v++)for(F=0;F<O;F++)B[T++]=o.x*Q[v]*et[F],B[T++]=o.y*Q[v]*tt[F],B[T++]=o.z*$[v];let at,nt,it,rt,ot=S/2;if(z)for(v=0;v<L;v++)for(F=0;F<O;F++)B[T++]=d.x*Q[v]*et[F],B[T++]=d.y*Q[v]*tt[F],B[T++]=d.z*$[v],W[ot]=!0,v>0&&v!==L-1&&0!==F&&F!==O-1&&(Y[ot]=!0),ot++;for(T=0,v=1;v<L-2;v++)for(at=v*O,nt=(v+1)*O,F=1;F<O-2;F++)Z[T++]=nt+F,Z[T++]=nt+F+1,Z[T++]=at+F+1,Z[T++]=nt+F,Z[T++]=at+F+1,Z[T++]=at+F;if(z){const t=L*O;for(v=1;v<L-2;v++)for(at=t+v*O,nt=t+(v+1)*O,F=1;F<O-2;F++)Z[T++]=nt+F,Z[T++]=at+F,Z[T++]=at+F+1,Z[T++]=nt+F,Z[T++]=at+F+1,Z[T++]=nt+F+1}if(z){if(N)for(rt=L*O,v=1;v<O-2;v++)Z[T++]=v,Z[T++]=v+1,Z[T++]=rt+v+1,Z[T++]=v,Z[T++]=rt+v+1,Z[T++]=rt+v;if(R)for(it=L*O-O,rt=L*O*E-O,v=1;v<O-2;v++)Z[T++]=it+v+1,Z[T++]=it+v,Z[T++]=rt+v,Z[T++]=it+v+1,Z[T++]=rt+v,Z[T++]=rt+v+1}if(U){for(v=1;v<L-2;v++)rt=O*L+O*v,it=O*v,Z[T++]=rt,Z[T++]=it+O,Z[T++]=it,Z[T++]=rt,Z[T++]=rt+O,Z[T++]=it+O;for(v=1;v<L-2;v++)rt=O*L+O*(v+1)-1,it=O*(v+1)-1,Z[T++]=it+O,Z[T++]=rt,Z[T++]=it,Z[T++]=it+O,Z[T++]=rt+O,Z[T++]=rt}const st=new u.GeometryAttributes;P.position&&(st.position=new m.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:B}));let mt=0,ut=0,ct=0,lt=0;const ft=S/2;let dt;const Ct=s.Ellipsoid.fromCartesian3(o),pt=s.Ellipsoid.fromCartesian3(d);if(P.st||P.normal||P.tangent||P.bitangent){for(v=0;v<S;v++){dt=W[v]?pt:Ct;const t=n.Cartesian3.fromArray(B,3*v,C),e=dt.geodeticSurfaceNormal(t,p);if(Y[v]&&n.Cartesian3.negate(e,e),P.st){const t=a.Cartesian2.negate(e,h);K[mt++]=Math.atan2(t.y,t.x)/f.CesiumMath.TWO_PI+.5,K[mt++]=Math.asin(e.z)/Math.PI+.5}if(P.normal&&(j[ut++]=e.x,j[ut++]=e.y,j[ut++]=e.z),P.tangent||P.bitangent){const t=y;let a,i=0;if(W[v]&&(i=ft),a=!N&&v>=i&&v<i+2*O?n.Cartesian3.UNIT_X:n.Cartesian3.UNIT_Z,n.Cartesian3.cross(a,e,t),n.Cartesian3.normalize(t,t),P.tangent&&(q[ct++]=t.x,q[ct++]=t.y,q[ct++]=t.z),P.bitangent){const a=n.Cartesian3.cross(e,t,_);n.Cartesian3.normalize(a,a),H[lt++]=a.x,H[lt++]=a.y,H[lt++]=a.z}}}P.st&&(st.st=new m.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:K})),P.normal&&(st.normal=new m.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:j})),P.tangent&&(st.tangent=new m.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:q})),P.bitangent&&(st.bitangent=new m.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:H}))}if(r.defined(t._offsetAttribute)){const e=B.length,a=t._offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(e/3).fill(a);st.applyOffset=new m.GeometryAttribute({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}return new m.Geometry({attributes:st,indices:Z,primitiveType:m.PrimitiveType.TRIANGLES,boundingSphere:e.BoundingSphere.fromEllipsoid(Ct),offsetAttribute:t._offsetAttribute})},k.getUnitEllipsoid=function(){return r.defined(F)||(F=k.createGeometry(new k({radii:new n.Cartesian3(1,1,1),vertexFormat:d.VertexFormat.POSITION_ONLY}))),F},t.EllipsoidGeometry=k}));
