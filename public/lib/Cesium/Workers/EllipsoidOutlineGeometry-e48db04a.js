/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Transforms-96990627","./Cartesian3-2da9bb0a","./ComponentDatatype-322827fe","./defaultValue-4607806f","./DeveloperError-46384437","./Rectangle-86ccddaa","./GeometryAttribute-7cf0f8d6","./GeometryAttributes-acac33d2","./GeometryOffsetAttribute-3e5f3e97","./IndexDatatype-3ff1faa7","./Math-6bc63320"],(function(t,i,e,a,n,o,r,s,u,m,f,l){"use strict";const c=new e.Cartesian3(1,1,1),d=Math.cos,C=Math.sin;function _(t){t=n.defaultValue(t,n.defaultValue.EMPTY_OBJECT);const i=n.defaultValue(t.radii,c),a=n.defaultValue(t.innerRadii,i),o=n.defaultValue(t.minimumClock,0),r=n.defaultValue(t.maximumClock,l.CesiumMath.TWO_PI),s=n.defaultValue(t.minimumCone,0),u=n.defaultValue(t.maximumCone,l.CesiumMath.PI),m=Math.round(n.defaultValue(t.stackPartitions,10)),f=Math.round(n.defaultValue(t.slicePartitions,8)),d=Math.round(n.defaultValue(t.subdivisions,128));this._radii=e.Cartesian3.clone(i),this._innerRadii=e.Cartesian3.clone(a),this._minimumClock=o,this._maximumClock=r,this._minimumCone=s,this._maximumCone=u,this._stackPartitions=m,this._slicePartitions=f,this._subdivisions=d,this._offsetAttribute=t.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}_.packedLength=2*e.Cartesian3.packedLength+8,_.pack=function(t,i,a){return a=n.defaultValue(a,0),e.Cartesian3.pack(t._radii,i,a),a+=e.Cartesian3.packedLength,e.Cartesian3.pack(t._innerRadii,i,a),a+=e.Cartesian3.packedLength,i[a++]=t._minimumClock,i[a++]=t._maximumClock,i[a++]=t._minimumCone,i[a++]=t._maximumCone,i[a++]=t._stackPartitions,i[a++]=t._slicePartitions,i[a++]=t._subdivisions,i[a]=n.defaultValue(t._offsetAttribute,-1),i};const p=new e.Cartesian3,h=new e.Cartesian3,y={radii:p,innerRadii:h,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};_.unpack=function(t,i,a){i=n.defaultValue(i,0);const o=e.Cartesian3.unpack(t,i,p);i+=e.Cartesian3.packedLength;const r=e.Cartesian3.unpack(t,i,h);i+=e.Cartesian3.packedLength;const s=t[i++],u=t[i++],m=t[i++],f=t[i++],l=t[i++],c=t[i++],d=t[i++],C=t[i];return n.defined(a)?(a._radii=e.Cartesian3.clone(o,a._radii),a._innerRadii=e.Cartesian3.clone(r,a._innerRadii),a._minimumClock=s,a._maximumClock=u,a._minimumCone=m,a._maximumCone=f,a._stackPartitions=l,a._slicePartitions=c,a._subdivisions=d,a._offsetAttribute=-1===C?void 0:C,a):(y.minimumClock=s,y.maximumClock=u,y.minimumCone=m,y.maximumCone=f,y.stackPartitions=l,y.slicePartitions=c,y.subdivisions=d,y.offsetAttribute=-1===C?void 0:C,new _(y))},_.createGeometry=function(t){const e=t._radii;if(e.x<=0||e.y<=0||e.z<=0)return;const o=t._innerRadii;if(o.x<=0||o.y<=0||o.z<=0)return;const c=t._minimumClock,_=t._maximumClock,p=t._minimumCone,h=t._maximumCone,y=t._subdivisions,k=r.Ellipsoid.fromCartesian3(e);let b=t._slicePartitions+1,A=t._stackPartitions+1;b=Math.round(b*Math.abs(_-c)/l.CesiumMath.TWO_PI),A=Math.round(A*Math.abs(h-p)/l.CesiumMath.PI),b<2&&(b=2),A<2&&(A=2);let x=0,P=1;const v=o.x!==e.x||o.y!==e.y||o.z!==e.z;let M=!1,w=!1;v&&(P=2,p>0&&(M=!0,x+=b),h<Math.PI&&(w=!0,x+=b));const V=y*P*(A+b),g=new Float64Array(3*V),E=2*(V+x-(b+A)*P),G=f.IndexDatatype.createTypedArray(V,E);let D,O,I,T,z=0;const L=new Array(A),R=new Array(A);for(D=0;D<A;D++)T=p+D*(h-p)/(A-1),L[D]=C(T),R[D]=d(T);const N=new Array(y),B=new Array(y);for(D=0;D<y;D++)I=c+D*(_-c)/(y-1),N[D]=C(I),B[D]=d(I);for(D=0;D<A;D++)for(O=0;O<y;O++)g[z++]=e.x*L[D]*B[O],g[z++]=e.y*L[D]*N[O],g[z++]=e.z*R[D];if(v)for(D=0;D<A;D++)for(O=0;O<y;O++)g[z++]=o.x*L[D]*B[O],g[z++]=o.y*L[D]*N[O],g[z++]=o.z*R[D];for(L.length=y,R.length=y,D=0;D<y;D++)T=p+D*(h-p)/(y-1),L[D]=C(T),R[D]=d(T);for(N.length=b,B.length=b,D=0;D<b;D++)I=c+D*(_-c)/(b-1),N[D]=C(I),B[D]=d(I);for(D=0;D<y;D++)for(O=0;O<b;O++)g[z++]=e.x*L[D]*B[O],g[z++]=e.y*L[D]*N[O],g[z++]=e.z*R[D];if(v)for(D=0;D<y;D++)for(O=0;O<b;O++)g[z++]=o.x*L[D]*B[O],g[z++]=o.y*L[D]*N[O],g[z++]=o.z*R[D];for(z=0,D=0;D<A*P;D++){const t=D*y;for(O=0;O<y-1;O++)G[z++]=t+O,G[z++]=t+O+1}let S=A*y*P;for(D=0;D<b;D++)for(O=0;O<y-1;O++)G[z++]=S+D+O*b,G[z++]=S+D+(O+1)*b;if(v)for(S=A*y*P+b*y,D=0;D<b;D++)for(O=0;O<y-1;O++)G[z++]=S+D+O*b,G[z++]=S+D+(O+1)*b;if(v){let t=A*y*P,i=t+y*b;if(M)for(D=0;D<b;D++)G[z++]=t+D,G[z++]=i+D;if(w)for(t+=y*b-b,i+=y*b-b,D=0;D<b;D++)G[z++]=t+D,G[z++]=i+D}const U=new u.GeometryAttributes({position:new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:g})});if(n.defined(t._offsetAttribute)){const i=g.length,e=t._offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(i/3).fill(e);U.applyOffset=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}return new s.Geometry({attributes:U,indices:G,primitiveType:s.PrimitiveType.LINES,boundingSphere:i.BoundingSphere.fromEllipsoid(k),offsetAttribute:t._offsetAttribute})},t.EllipsoidOutlineGeometry=_}));
